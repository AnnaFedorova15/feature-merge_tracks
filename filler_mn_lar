#include "NDLArMINERvAMatchRecoFiller.h"


namespace cafmaker
{
  NDLArMINERvAMatchRecoFiller::NDLArMINERvAMatchRecoFiller()
    : IRecoBranchFiller("LArMINERvAMatcher")
  {
    // nothing to do
    SetConfigured(true);
  }

  void NDLArMINERvAMatchRecoFiller::_FillRecoBranches(const Trigger &trigger,
                                                    caf::StandardRecord &sr, //should it be &dlp instead of &sr?
                                                //????  caf::StandardRecord &dlp,
                                        //	caf::StandardRecord &Mnv,
                                                      const cafmaker::Params &par,
                                                      const TruthMatcher *truthMatcher) const

  {
 // match tracks using the info that should have been filled by the ND-LAr and MINERvA reco fille$
    // sr.nd.ntrkmatch = 0;
    for (unsigned int ixn_dlp = 0; ixn_dlp  < sr.nd.lar.ndlp; ixn_dlp++)
    {
      caf::SRNDLArInt dlp = sr.nd.lar.dlp[ixn_dlp];
      for (unsigned int ilar = 0; ilar < dlp.ntracks; ++ilar)
      {
       	double z2_lar = dlp.tracks[ilar].end.z; // cm
        //
	// Check LAr track exits through the end; if not move to next track
        if (z2_lar < 800)
          continue;


      //

        double x1_lar = dlp.tracks[ilar].start.x; // cm
        double x2_lar = dlp.tracks[ilar].end.x;   // cm
        double y1_lar = dlp.tracks[ilar].start.y;
        double y2_lar = dlp.tracks[ilar].end.y;
        double z1_lar = dlp.tracks[ilar].start.z;
        //  double  z2_lar = sr.nd.lar.tracks[ilar].end.z;
/*
   // Now get the other variables
   double  x1_lar = sr.nd.lar.tracks[ilar].start.x;   //cm
   double  x2_lar = sr.nd.lar.tracks[ilar].end.x;    //cm
   double  y1_lar = sr.nd.lar.tracks[ilar].start.y;
    double  y2_lar = sr.nd.lar.tracks[ilar].end.y;
   double  z1_lar = sr.nd.lar.tracks[ilar].start.z;
  //  double  z2_lar = sr.nd.lar.tracks[ilar].end.z;
*/




   // The slope of the track in LAr
   // Unfortunately the saved unit vectors in the LAr reco are corrupted
   // This should be replaced with the actual saved unit vectors
   // Hence we calculate the slope from the start and end position of the track in LAr instead

//
   // Loop over the minerva tracks



                for (unsigned int ixn_minerva = 0; ixn_minerva < sr.nd.minerva.nixn; ixn_minerva++)
        {

          caf::SRMINERvAInt Mnv_int = sr.nd.minerva.ixn[ixn_minerva]; //dlp?
          unsigned int n_minerva_tracks = Mnv_int.ntracks; // # tracks in minerva in evtIdx

       	  for (unsigned int iminerva = 0; iminerva < n_minerva_tracks; ++iminerva)
          {


            double x1_minerva = Mnv_int.tracks[iminerva].start.x; // cm
            double x2_minerva = Mnv_int.tracks[iminerva].end.x;   // cm
            double y1_minerva = Mnv_int.tracks[iminerva].start.y;
            double y2_minerva = Mnv_int.tracks[iminerva].end.y;
            double z1_minerva = Mnv_int.tracks[iminerva].start.z; // cm
            double z2_minerva = Mnv_int.tracks[iminerva].end.z;


/*
   // Now get the other variables
   double x1_minerva = sr.nd.minerva.tracks[iminerva].start.x;   //cm
   double x2_minerva = sr.nd.minerva.tracks[iminerva].end.x;    //cm
   double y1_minerva = sr.nd.minerva.tracks[iminerva].start.y;
   double y2_minerva = sr.nd.minerva.tracks[iminerva].end.y;
   double z2_minerva = sr.nd.minerva.tracks[iminerva].end.z;
     // Check that this minerva track starts in first few planes; if not move to next track
     if (z1_minerva < -180) continue;
*/
//

//
     // Use the most upstream slope of the minerva track
                        double tg_theta_mn_x; //tg_theta_mn_y;
                        tg_theta_mn_x = (x2_minerva - x1_minerva) / (z2_minerva - z1_minerva);
                        //tg_theta_mn_y = (y2_minerva - y1_minerva) / (z2_minerva - z1_minerva);
                        double theta_mn_x; // theta_mn_y;
                        theta_mn_x = atan(tg_theta_mn_x);
                    //    theta_mn_y = atan(tg_theta_mn_y);

                        double tg_theta_nd_x; // tg_theta_nd_y;
                        tg_theta_nd_x = (x2_lar - x1_lar) / (z2_lar - z1_lar);
                        //tg_theta_nd_y = (y2_lar - y1_lar) / (z2_lar - z1_lar);
                        double theta_nd_x; // theta_nd_y;
                        theta_nd_x = atan(tg_theta_nd_x);
                        //theta_nd_y = atan(tg_theta_nd_y);


                        double delta_theta_x;
                        // double delta_theta_y;
                        // delta_theta_y = theta_mn_y - theta_nd_y;
                        delta_theta_x = theta_mn_x - theta_nd_x;
                        double t_mn;
                        t_mn = (-70 - z1_minerva) / (z2_minerva - z1_minerva);

                        double x_mn;
                        double y_mn;
                        //double z_mn;
                        x_mn = t_mn * (x2_minerva - x1_minerva) + x1_minerva;
                        y_mn = t_mn * (y2_minerva - y1_minerva) + y1_minerva;
                        //z_mn = t_mn * (z2_minerva - z1_minerva) + z1_minerva;


                        double t_nd;
                        t_nd = (-70 - z1_lar) / (z2_lar - z1_lar);

                        double x_nd;
                        double y_nd;
                        //double z_nd;
                        x_nd = t_nd * (x2_lar - x1_lar) + x1_lar;
                        y_nd = t_nd * (y2_lar - y1_lar) + y1_lar;
                        //z_nd = t_nd * (z2_lar - z1_lar) + z1_lar;

                        double dist_x, dist_y;
                        dist_x = (x_mn - x_nd);
                        dist_y = (y_mn - y_nd);

double len_mn = sqrt((x2_minerva-x1_minerva)*(x2_minerva-x1_minerva) + (z2_minerva-z1_minerva)*(z2_minerva-z1_minerva)+(y2_minerva-y1_minerva)*(y2_minerva-y1_minerva));
double len = sqrt((x2_lar-x1_lar)*(x2_lar-x1_lar) + (z2_lar-z1_lar)*(z2_lar-z1_lar)+(y2_lar-y1_lar)*(y2_lar-y1_lar));


     // Propagate the LAr track into the minerva, by drawing a straight line into the minerva using the
     // slope in the LAr. Propagate the track to the same z as the minerva is, and
     // compare the predicted vs actual position in x
 double residual = 0;
 residual = sqrt(pow(dist_x,2)+pow(dist_y,2));
//
// Calculate the unit vectors

//     double slope_x_lar = (x2_lar-x1_lar)/len;
//     double slope_z_lar = (z2_lar-z1_lar)/len;
//     double slope_y_lar = (y2_lar-y1_lar)/len;
  //   double theta = delta_theta_y;
//
double costheta = 0;
costheta=((x2_minerva-x1_minerva)*(x2_lar-x1_lar)+(y2_minerva-y1_minerva)*(y2_lar-y1_lar)+(z2_minerva-z1_minerva)*(z2_lar-z1_lar))/(len*len_mn);

     if (delta_theta_x < 0.02 && residual<5 && len>120 ) {
              caf::SRMINERvAID mnvid;
//caf::SRMINERvAID minervaid;
             mnvid.ixn = ixn_minerva;
//minervaid= ixn_minerva;

              mnvid.idx = iminerva;
//minervaid.idx = iminerva;


              caf::SRNDLArID larid;
              larid.ixn = ixn_dlp;
              larid.idx = ilar;
              larid.reco = caf::kDeepLearnPhys;

                 // Make the match

              caf::SRNDTrackAssn match;

              match.larid = larid;
            //  match.minervaid = mnvid; //To be fixed in Standard record
           //  match.minervaid = minervaid; //To be fixed in Standard record
                     //  match.minervaid = minervaid; //To be fixed in Standard record

              match.transdispl = residual;
              match.angdispl = costheta;
              sr.nd.trkmatch.extrap.emplace_back(match);
              sr.nd.trkmatch.nextrap += 1;


          //    caf::SRNDTrackAssn match;

            //  match.larid = larid;
              //match.minervaid = mnvid; //To be fixed in Standard record
             // match.transdispl = residual;
             // match.angdispl = costheta;
             // sr.nd.trkmatch.extrap.emplace_back(match);
             // sr.nd.trkmatch.nextrap += 1;
       // Can also have multiple track matches, so don't break at the end of the match
       // Should pick the best track match in selection code
                  }
          }
        }
      }
    }
  }
    std::deque<Trigger> NDLArMINERvAMatchRecoFiller::GetTriggers(int triggerType) const
  {
   return std::deque<Trigger>();
  }

}







